package com.mycompany.company.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CreateuserAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCreateuserAllPropertiesEquals(Createuser expected, Createuser actual) {
        assertCreateuserAutoGeneratedPropertiesEquals(expected, actual);
        assertCreateuserAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCreateuserAllUpdatablePropertiesEquals(Createuser expected, Createuser actual) {
        assertCreateuserUpdatableFieldsEquals(expected, actual);
        assertCreateuserUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCreateuserAutoGeneratedPropertiesEquals(Createuser expected, Createuser actual) {
        assertThat(expected)
            .as("Verify Createuser auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCreateuserUpdatableFieldsEquals(Createuser expected, Createuser actual) {
        assertThat(expected)
            .as("Verify Createuser relevant properties")
            .satisfies(e -> assertThat(e.getRollNo()).as("check rollNo").isEqualTo(actual.getRollNo()))
            .satisfies(e -> assertThat(e.getUserName()).as("check userName").isEqualTo(actual.getUserName()))
            .satisfies(e -> assertThat(e.getPassword()).as("check password").isEqualTo(actual.getPassword()))
            .satisfies(e -> assertThat(e.getDepartment()).as("check department").isEqualTo(actual.getDepartment()))
            .satisfies(e -> assertThat(e.getDesignation()).as("check designation").isEqualTo(actual.getDesignation()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getUserImage()).as("check userImage").isEqualTo(actual.getUserImage()))
            .satisfies(
                e -> assertThat(e.getUserImageContentType()).as("check userImage contenty type").isEqualTo(actual.getUserImageContentType())
            )
            .satisfies(e -> assertThat(e.getRoleStatus()).as("check roleStatus").isEqualTo(actual.getRoleStatus()))
            .satisfies(e -> assertThat(e.getRole()).as("check role").isEqualTo(actual.getRole()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCreateuserUpdatableRelationshipsEquals(Createuser expected, Createuser actual) {}
}
